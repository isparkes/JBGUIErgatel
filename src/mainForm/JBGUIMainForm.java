/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package mainForm;

import Utils.Common;
import Utils.ItemLookupResult;
import Utils.JBillingAPI;
import com.sapienter.jbilling.server.item.ItemDTOEx;
import com.sapienter.jbilling.server.order.OrderLineWS;
import com.sapienter.jbilling.server.order.OrderWS;
import com.sapienter.jbilling.server.user.ContactWS;
import com.sapienter.jbilling.server.user.UserWS;
import com.sapienter.jbilling.server.util.api.JbillingAPIException;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class JBGUIMainForm extends javax.swing.JFrame {

  public enum ServTypes {

    MobileServices, DataServices, FIXServices
  };

  HashMap<String, Integer> bundleMapping = new HashMap<String, Integer>();
  HashMap<String, Integer> rateMapping = new HashMap<String, Integer>();
  //HashMap<String,Integer> serviceType = new HashMap<String,Integer>();
  HashMap<Integer, ServTypes> serviceTypeR = new HashMap<Integer, ServTypes>();
  HashMap<Integer, Object> partnerServices = new HashMap<Integer, Object>();
  public Map<ServTypes, Integer> enumServMap = new EnumMap<ServTypes, Integer>(ServTypes.class);
  private Boolean userParentSelectedState;

  /**
   * Creates new form JBGUIMainForm
   */
  public JBGUIMainForm() {
    initComponents();

    // Set up enabled statuses
    txtBCNKeyTyped(null);
    txtParentUserIDKeyTyped(null);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jPanel2 = new javax.swing.JPanel();
    lblBCN = new javax.swing.JLabel();
    txtBCN = new javax.swing.JTextField();
    btnFindByBCN = new javax.swing.JButton();
    txtParentUserID = new javax.swing.JTextField();
    lblUserID = new javax.swing.JLabel();
    txtUserNameOrg = new javax.swing.JTextField();
    lblCompanyName = new javax.swing.JLabel();
    btnFindByUserId = new javax.swing.JButton();
    chkIsParent = new javax.swing.JCheckBox();
    pnlScheduledTasks = new javax.swing.JPanel();
    btnTriggerBilling = new javax.swing.JButton();
    btnTriggerLoading = new javax.swing.JButton();
    processPayout = new javax.swing.JButton();
    rbLive = new javax.swing.JRadioButton();
    rbLab = new javax.swing.JRadioButton();
    rbLocalhost = new javax.swing.JRadioButton();
    jPanel1 = new javax.swing.JPanel();
    lblANumber = new javax.swing.JLabel();
    txtANumber = new javax.swing.JTextField();
    cbxRates = new javax.swing.JComboBox();
    lblMobileRate = new javax.swing.JLabel();
    lblMobileBundle = new javax.swing.JLabel();
    cbxBundles = new javax.swing.JComboBox();
    btnCreateSubAcct = new javax.swing.JButton();
    lblCreatedUser = new javax.swing.JLabel();
    txtNewID = new javax.swing.JTextField();
    btnLoad = new javax.swing.JButton();
    lblDateFrom = new javax.swing.JLabel();
    lblDateTo = new javax.swing.JLabel();
    btnAddBundle = new javax.swing.JButton();
    cbxOptionalBundlesSelected = new javax.swing.JComboBox();
    btnRemoveBundle = new javax.swing.JButton();
    lblOptionalBundles = new javax.swing.JLabel();
    dchDateFrom = new com.toedter.calendar.JDateChooser();
    dchDateTo = new com.toedter.calendar.JDateChooser();
    btnExit = new javax.swing.JButton();
    jPanel3 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    loadPartners = new javax.swing.JButton();
    partnerId = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    serviceTypeStrings = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    pRateTxt = new javax.swing.JTextField();
    refFee = new javax.swing.JTextField();
    partnerServiceCreate = new javax.swing.JButton();
    loadPartServ = new javax.swing.JButton();
    partnerServiceIds = new javax.swing.JComboBox();
    jLabel7 = new javax.swing.JLabel();
    partnerServEdit = new javax.swing.JButton();
    partnerServUpdate = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Ergatel JBilling GUI");
    setResizable(false);

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(" Parent User "));

    lblBCN.setText("User BCN");

    txtBCN.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtBCNActionPerformed(evt);
      }
    });
    txtBCN.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        txtBCNKeyTyped(evt);
      }
    });

    btnFindByBCN.setText("Find");
    btnFindByBCN.setText("Find");
    btnFindByBCN.setEnabled(false);
    btnFindByBCN.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnFindByBCNActionPerformed(evt);
      }
    });

    txtParentUserID.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtParentUserIDActionPerformed(evt);
      }
    });
    txtParentUserID.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        txtParentUserIDKeyTyped(evt);
      }
    });

    lblUserID.setText("UserID");

    txtUserNameOrg.setEditable(false);
    txtUserNameOrg.setEnabled(false);
    txtUserNameOrg.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtUserNameOrgActionPerformed(evt);
      }
    });

    lblCompanyName.setText("Company Name");

    btnFindByUserId.setText("Find");
    btnFindByUserId.setEnabled(false);
    btnFindByUserId.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnFindByUserIdActionPerformed(evt);
      }
    });
    btnFindByUserId.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyTyped(java.awt.event.KeyEvent evt) {
        btnFindByUserIdKeyTyped(evt);
      }
    });

    chkIsParent.setText("Parent");
    chkIsParent.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        chkIsParentActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(lblBCN)
          .add(lblUserID))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(txtParentUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(txtBCN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(12, 12, 12)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
          .add(btnFindByUserId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(btnFindByBCN, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .add(18, 18, 18)
        .add(lblCompanyName)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(chkIsParent)
          .add(txtUserNameOrg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 403, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
          .add(jPanel2Layout.createSequentialGroup()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(txtUserNameOrg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(lblCompanyName))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(chkIsParent))
          .add(jPanel2Layout.createSequentialGroup()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(lblBCN)
              .add(txtBCN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(btnFindByBCN))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(txtParentUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(lblUserID)
              .add(btnFindByUserId))))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlScheduledTasks.setBorder(javax.swing.BorderFactory.createTitledBorder("Scheduled Tasks"));

    btnTriggerBilling.setText("Trigger Billing Run");
    btnTriggerBilling.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnTriggerBillingActionPerformed(evt);
      }
    });

    btnTriggerLoading.setText("Trigger CDR Loading");
    btnTriggerLoading.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnTriggerLoadingActionPerformed(evt);
      }
    });

    processPayout.setText("Process Partner Payouts");
    processPayout.setEnabled(false);
    processPayout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        processPayoutActionPerformed(evt);
      }
    });

    rbLive.setText("jb-live");
    rbLive.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rbLiveActionPerformed(evt);
      }
    });

    rbLab.setText("jb-lab");
    rbLab.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rbLabActionPerformed(evt);
      }
    });

    rbLocalhost.setText("localhost");
    rbLocalhost.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rbLocalhostActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout pnlScheduledTasksLayout = new org.jdesktop.layout.GroupLayout(pnlScheduledTasks);
    pnlScheduledTasks.setLayout(pnlScheduledTasksLayout);
    pnlScheduledTasksLayout.setHorizontalGroup(
      pnlScheduledTasksLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(pnlScheduledTasksLayout.createSequentialGroup()
        .add(26, 26, 26)
        .add(btnTriggerLoading)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(btnTriggerBilling, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 173, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(processPayout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .add(66, 66, 66)
        .add(rbLive)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
        .add(rbLab)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(rbLocalhost)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlScheduledTasksLayout.setVerticalGroup(
      pnlScheduledTasksLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(pnlScheduledTasksLayout.createSequentialGroup()
        .add(pnlScheduledTasksLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(btnTriggerLoading)
          .add(btnTriggerBilling)
          .add(processPayout)
          .add(rbLive)
          .add(rbLab)
          .add(rbLocalhost))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Create Sub Account"));

    lblANumber.setText("A Number");

    txtANumber.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        txtANumberActionPerformed(evt);
      }
    });
    txtANumber.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        txtANumberKeyReleased(evt);
      }
    });

    cbxRates.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbxRatesActionPerformed(evt);
      }
    });

    lblMobileRate.setText("Mobile Rate");

    lblMobileBundle.setText("Optional Bundles");

    cbxBundles.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbxBundlesActionPerformed(evt);
      }
    });

    btnCreateSubAcct.setText("Create");
    btnCreateSubAcct.setEnabled(false);
    btnCreateSubAcct.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCreateSubAcctActionPerformed(evt);
      }
    });

    lblCreatedUser.setText("New User");

    txtNewID.setEditable(false);
    txtNewID.setEnabled(false);

    btnLoad.setText("Load List");
    btnLoad.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnLoadActionPerformed(evt);
      }
    });

    lblDateFrom.setText("Valid From");

    lblDateTo.setText("To");

    btnAddBundle.setText("Add to List");
    btnAddBundle.setEnabled(false);
    btnAddBundle.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnAddBundleActionPerformed(evt);
      }
    });

    cbxOptionalBundlesSelected.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbxOptionalBundlesSelectedActionPerformed(evt);
      }
    });

    btnRemoveBundle.setText("Remove");
    btnRemoveBundle.setEnabled(false);
    btnRemoveBundle.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnRemoveBundleActionPerformed(evt);
      }
    });

    lblOptionalBundles.setText("Bundles Selected");

    dchDateFrom.setDateFormatString("MM/dd/yyyy");

    dchDateTo.setDateFormatString("MM/dd/yyyy");

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel1Layout.createSequentialGroup()
            .add(lblCreatedUser)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(txtNewID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(jPanel1Layout.createSequentialGroup()
            .add(lblANumber)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(txtANumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(btnLoad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(24, 24, 24)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(lblMobileRate)
          .add(lblMobileBundle)
          .add(lblDateFrom)
          .add(lblOptionalBundles))
        .add(24, 24, 24)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
            .add(org.jdesktop.layout.GroupLayout.LEADING, cbxBundles, 0, 362, Short.MAX_VALUE)
            .add(cbxOptionalBundlesSelected, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(cbxRates, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .add(jPanel1Layout.createSequentialGroup()
            .add(dchDateFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(18, 18, 18)
            .add(lblDateTo)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(dchDateTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(btnCreateSubAcct, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(btnAddBundle)
          .add(btnRemoveBundle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel1Layout.createSequentialGroup()
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(lblDateFrom)
          .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(txtANumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(lblANumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(lblDateTo)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, dchDateFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, dchDateTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(18, 18, Short.MAX_VALUE)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(txtNewID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(lblCreatedUser)
          .add(lblMobileRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(cbxRates, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(lblMobileBundle)
          .add(cbxBundles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(cbxOptionalBundlesSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(lblOptionalBundles)
          .add(btnLoad)))
      .add(jPanel1Layout.createSequentialGroup()
        .add(btnCreateSubAcct)
        .add(49, 49, 49)
        .add(btnAddBundle)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(btnRemoveBundle)
        .add(0, 0, Short.MAX_VALUE))
    );

    btnExit.setText("Exit");
    btnExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExitActionPerformed(evt);
      }
    });

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Partner"));

    jLabel3.setText("Partner id");

    loadPartners.setText("Load Partner List");
    loadPartners.setEnabled(false);
    loadPartners.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        loadPartnersActionPerformed(evt);
      }
    });

    partnerId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
    partnerId.setEnabled(false);

    jLabel4.setText("Service Type");

    serviceTypeStrings.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
    serviceTypeStrings.setEnabled(false);

    jLabel5.setText("Percentage Rate");

    jLabel6.setText("Referral Fee");

    refFee.setText("0.00");
    refFee.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        refFeeActionPerformed(evt);
      }
    });

    partnerServiceCreate.setText("Create");
    partnerServiceCreate.setEnabled(false);

    loadPartServ.setText("Show Partner services");
    loadPartServ.setEnabled(false);
    loadPartServ.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        loadPartServActionPerformed(evt);
      }
    });

    partnerServiceIds.setModel(new javax.swing.DefaultComboBoxModel(new String[] {  }));
    partnerServiceIds.setEnabled(false);
    /*partnerServiceIds.addActionListener(new java.awt.event.ActionListener() {
      public void partnerServiceIdsactionPerformed(java.awt.event.ActionEvent evt) {
        // partnerServiceIdsActionPerformed(evt);
      }
    });*/

    jLabel7.setText("Partner Service id");

    partnerServEdit.setText("Edit");
    partnerServEdit.setEnabled(false);

    partnerServUpdate.setText("Update");
    partnerServUpdate.setEnabled(false);
    partnerServUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        partnerServUpdateActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .add(23, 23, 23)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanel3Layout.createSequentialGroup()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jLabel5)
              .add(jLabel6)
              .add(jLabel3))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
              .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                  .add(pRateTxt)
                  .add(refFee))
                .add(608, 608, 608))
              .add(jPanel3Layout.createSequentialGroup()
                .add(partnerId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(serviceTypeStrings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(partnerServiceIds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))))
          .add(jPanel3Layout.createSequentialGroup()
            .add(loadPartners)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(partnerServiceCreate)
            .add(333, 333, 333)
            .add(loadPartServ)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(partnerServEdit)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(partnerServUpdate)
            .add(0, 0, Short.MAX_VALUE))))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel3)
          .add(partnerId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(jLabel4)
          .add(serviceTypeStrings, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(jLabel7)
          .add(partnerServiceIds, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel5)
          .add(pRateTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabel6)
          .add(refFee, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .add(24, 24, 24)
        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(loadPartners)
          .add(partnerServiceCreate)
          .add(loadPartServ)
          .add(partnerServEdit)
          .add(partnerServUpdate))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pRateTxt.setText("0.00");
    partnerServiceCreate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        partnerServiceCreateActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
          .add(pnlScheduledTasks, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.LEADING, btnExit)
          .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(pnlScheduledTasks, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(btnExit)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(" Partner Management "));

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    // exit
    this.dispose();
  }//GEN-LAST:event_btnExitActionPerformed

  private void btnTriggerLoadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriggerLoadingActionPerformed
    // Trigger loading
    try {
      JBillingAPI.getApi().triggerLoading();
    } catch (JbillingAPIException ex) {
      System.out.println("API Exception");
    }
  }//GEN-LAST:event_btnTriggerLoadingActionPerformed

  private void btnTriggerBillingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriggerBillingActionPerformed
    // Trigger Billing
    try {
      JBillingAPI.getApi().triggerBilling();
    } catch (JbillingAPIException ex) {
      System.out.println("API Exception");
    }
  }//GEN-LAST:event_btnTriggerBillingActionPerformed

  private void txtUserNameOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameOrgActionPerformed
    // set the create button
    setCreateValidation();
  }//GEN-LAST:event_txtUserNameOrgActionPerformed

  private void txtParentUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtParentUserIDActionPerformed
    // set the create button
    setCreateValidation();
  }//GEN-LAST:event_txtParentUserIDActionPerformed

  private void btnFindByBCNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByBCNActionPerformed
    // find user for BCN
    try {
      Integer result = JBillingAPI.getApi().getUserId(txtBCN.getText());

      UserWS user = JBillingAPI.getApi().getUserWS(result);

      txtUserNameOrg.setText(user.getContact().getOrganizationName());
      txtParentUserID.setText(Integer.toString(result));
      chkIsParent.setSelected(user.getIsParent());
      userParentSelectedState = user.getIsParent();
      chkIsParent.setEnabled(user.getIsParent() == false);

    } catch (Exception ex) {
      String cleanedErrorMessage;
      if (ex.getMessage().contains("No row with the given identifier exists: [com.sapienter.jbilling.server.user.db.UserDTO#0]")) {
        cleanedErrorMessage = "Cannot find BCN: " + txtBCN.getText();
      } else {
        Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
        cleanedErrorMessage = ex.getMessage();
      }
      Utils.Common.showErrorBox(rootPane, "Error: " + cleanedErrorMessage);
    }
  }//GEN-LAST:event_btnFindByBCNActionPerformed

  private void txtBCNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBCNKeyTyped
    // allow us to do the search if we have a number to search on
    btnFindByBCN.setEnabled(txtBCN.getText().length() > 0);
  }//GEN-LAST:event_txtBCNKeyTyped

  private void txtBCNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBCNActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_txtBCNActionPerformed

  private void btnCreateSubAcctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateSubAcctActionPerformed
    // validate the fields
    if (Utils.Validations.validateANumber(txtANumber.getText()) == false) {
      Utils.Common.showErrorBox(rootPane, "The A Number did not have the format 0nnnnnnnnn");
      return;
    }

    // validate the fields - we must have a rate, bundles are optional
    if (cbxRates.getSelectedItem().toString().isEmpty()) {
      Utils.Common.showErrorBox(rootPane, "No rate selected");
      return;
    }

    // validate the fields
    if (txtParentUserID.getText().isEmpty()) {
      Utils.Common.showErrorBox(rootPane, "No parent user ID is selected");
      return;
    }

    // find user for BCN
    try {
      Integer ParentId = Integer.valueOf(txtParentUserID.getText());
      UserWS user = JBillingAPI.getApi().getUserWS(ParentId);

      if (user == null) {
        Utils.Common.showErrorBox(rootPane, "Error getting parent user <" + ParentId + ">");
        return;
      }

      // Get the items back
      String SelectedRate = (String) cbxRates.getSelectedItem();
      Integer mobileRateItem = rateMapping.get(SelectedRate);

      if (mobileRateItem == null) {
        Utils.Common.showErrorBox(rootPane, "Could not find item for item <" + SelectedRate + ">");
        return;
      }

      for (int idx = 0; idx < cbxOptionalBundlesSelected.getItemCount(); idx++) {
        String SelectedBundle = (String) cbxOptionalBundlesSelected.getItemAt(idx);

        if (SelectedBundle.isEmpty() == false) {
          Integer mobileBundleItem = bundleMapping.get(SelectedBundle);

          if (mobileBundleItem == null) {
            Utils.Common.showErrorBox(rootPane, "Could not find item for item <" + SelectedBundle + ">");
            return;
          }
        }
      }

      // see if we already have a user with the requested login
      try {
        Integer aNumUser = JBillingAPI.getApi().getUserId(txtANumber.getText());

        if ((aNumUser != null) && aNumUser > 0) {
          Utils.Common.showErrorBox(rootPane, "User <" + aNumUser + "> already has A Number <" + txtANumber.getText() + ">");
          return;
        }
      } catch (Exception e) {
        // just accept it
      }

      UserWS newUser = new UserWS();
      newUser.setParentId(ParentId);
      newUser.setUserName(txtANumber.getText());
      newUser.setLanguageId(user.getLanguageId());
      newUser.setStatusId(user.getStatusId());
      newUser.setCurrencyId(user.getCurrencyId());

      ContactWS contact = user.getContact();
      contact.setOrganizationName(contact.getOrganizationName() + " " + txtANumber.getText());
      newUser.setContact(contact);
      newUser.setMainRoleId(user.getMainRoleId());
      newUser.setPassword("123qwe");

      Integer createdUserId = JBillingAPI.getApi().createUser(newUser);

      if (createdUserId == null) {
        Utils.Common.showErrorBox(rootPane, "Error creating new user");
        return;
      }

      txtNewID.setText(createdUserId.toString());

      // Now try to make the orders
      OrderWS rateOrder = new OrderWS();
      ArrayList<OrderLineWS> lines = new ArrayList<OrderLineWS>();

      ItemDTOEx rateItem = JBillingAPI.getApi().getItem(mobileRateItem, createdUserId, null);

      OrderLineWS rateLine = new OrderLineWS();
      rateLine.setItemId(mobileRateItem);

      if (rateItem.getDescription().matches(".* ANR 0x*")) {
        rateLine.setDescription(rateItem.getDescription().replaceAll("0x*", txtANumber.getText()));
      } else {
        rateLine.setDescription(rateItem.getDescription() + " / ANR " + txtANumber.getText());
      }

      rateLine.setTypeId(1);
      rateLine.setUseItem(true);
      rateLine.setQuantity("1");
      lines.add(rateLine);

      for (int idx = 0; idx < cbxOptionalBundlesSelected.getItemCount(); idx++) {
        String SelectedBundle = (String) cbxOptionalBundlesSelected.getItemAt(idx);

        if (SelectedBundle.isEmpty() == false) {
          Integer mobileBundleItem = bundleMapping.get(SelectedBundle);

          ItemDTOEx bundleItem = JBillingAPI.getApi().getItem(mobileBundleItem, createdUserId, null);

          OrderLineWS bundleLine = new OrderLineWS();
          bundleLine.setItemId(mobileBundleItem);
          if (bundleItem.getDescription().matches(".* ANR 0x*")) {
            bundleLine.setDescription(bundleItem.getDescription().replaceAll("0x*", txtANumber.getText()));
          } else {
            bundleLine.setDescription(bundleItem.getDescription() + " / ANR " + txtANumber.getText());
          }
          bundleLine.setTypeId(1);
          bundleLine.setUseItem(true);
          bundleLine.setQuantity("1");
          lines.add(bundleLine);
        }
      }

      // Set up the order
      rateOrder.setUserId(createdUserId);
      rateOrder.setCurrencyId(user.getCurrencyId());
      rateOrder.setPeriod(13);                        // 1 = One time, 13 = Monthly
      rateOrder.setBillingTypeId(1);                  // 1 = Prepaid, 2 = Postpaid

      OrderLineWS[] orderLines = new OrderLineWS[lines.size()];
      for (int idx = 0; idx < lines.size(); idx++) {
        orderLines[idx] = lines.get(idx);
      }
      rateOrder.setOrderLines(orderLines);

      if (dchDateFrom.getDate() != null) {
        rateOrder.setActiveSince(dchDateFrom.getDate());
      }

      if (dchDateTo.getDate() != null) {
        rateOrder.setActiveUntil(dchDateTo.getDate());
      }

      Integer orderNumber = JBillingAPI.getApi().createOrder(rateOrder);

      Utils.Common.showErrorBox(rootPane, "Created new user <" + createdUserId + "> order <" + orderNumber + ">");

    } catch (Exception ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
      Utils.Common.showErrorBox(rootPane, "Error: " + ex.getMessage());
    }
  }//GEN-LAST:event_btnCreateSubAcctActionPerformed

  private void btnFindByUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByUserIdActionPerformed
    Integer userId;

    // get the user
    try {
      userId = Integer.valueOf(txtParentUserID.getText());
    } catch (NumberFormatException nfe) {
      Utils.Common.showErrorBox(rootPane, "The User ID was not a number");
      return;
    }

    // get the WS interface
    try {
      UserWS user = JBillingAPI.getApi().getUserWS(userId);

      txtBCN.setText(user.getUserName());
      txtUserNameOrg.setText(user.getContact().getOrganizationName());
      chkIsParent.setSelected(user.getIsParent());
      userParentSelectedState = user.getIsParent();
      chkIsParent.setEnabled(user.getIsParent() == false);
    } catch (Exception ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
      Utils.Common.showErrorBox(rootPane, "Error: " + ex.getMessage());
    }

    setCreateValidation();
  }//GEN-LAST:event_btnFindByUserIdActionPerformed

  private void btnFindByUserIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFindByUserIdKeyTyped
  }//GEN-LAST:event_btnFindByUserIdKeyTyped

  private void txtParentUserIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtParentUserIDKeyTyped
    // allow us to do the search if we have a number to search on
    btnFindByUserId.setEnabled(txtParentUserID.getText().length() > 0);
  }//GEN-LAST:event_txtParentUserIDKeyTyped

  private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
    // turn off the button
    btnLoad.setEnabled(false);
    btnLoad.repaint();

    try {
      // Build the search list
      ArrayList<Integer> searchList = new ArrayList<Integer>();
      searchList.add(Common.BUNDLE_TYPE);
      searchList.add(Common.RATE_TYPE);

      // get the list
      ArrayList<ItemLookupResult> resultList = Utils.JBillingAPI.getItemList(searchList);

      // Parse it
      Iterator<ItemLookupResult> itemBundleIter = resultList.iterator();

      // Get the lists we will sort
      ArrayList<String> ratesList = new ArrayList<String>();
      ArrayList<String> bundleList = new ArrayList<String>();

      // fill the comboboxes up
      while (itemBundleIter.hasNext()) {
        ItemLookupResult item = itemBundleIter.next();

        if (item.getType().equals(Common.BUNDLE_TYPE)) {
          //cbxBundles.addItem(item.getItemDesc());
          bundleList.add(item.getItemDesc());

          // Store the mapping away
          bundleMapping.put(item.getItemDesc(), item.getItemNumber());
        }

        if (item.getType().equals(Common.RATE_TYPE)) {
          //cbxRates.addItem(item.getItemDesc());
          ratesList.add(item.getItemDesc());

          // Store the mapping away
          rateMapping.put(item.getItemDesc(), item.getItemNumber());
        }

        // Sort them
        Collections.sort(bundleList);
        Collections.sort(ratesList);

      }

      Iterator<String> bundleIter = bundleList.iterator();
      Iterator<String> ratesIter = ratesList.iterator();

      // Clean out the boxes
      if (cbxBundles.getItemCount() > 0) {
        cbxBundles.removeAllItems();
      }
      if (cbxRates.getItemCount() > 0) {
        cbxRates.removeAllItems();
      }

      // Add default no bundle
      cbxBundles.addItem("");

      // Fill the combos
      while (bundleIter.hasNext()) {
        cbxBundles.addItem(bundleIter.next());
      }

      while (ratesIter.hasNext()) {
        cbxRates.addItem(ratesIter.next());
      }

      // Select the first one
      cbxRates.setSelectedIndex(0);
    } catch (Exception ex) {
      Utils.Common.showErrorBox(rootPane, "Error: " + ex.getMessage());
    } finally {
      // turn off the button
      btnLoad.setEnabled(true);
    }

    // Set the create button
    setCreateValidation();
  }//GEN-LAST:event_btnLoadActionPerformed

  private void chkIsParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIsParentActionPerformed
    // set parent if we need
    if ((chkIsParent.isSelected() == true) && (userParentSelectedState == false)) {
      chkIsParent.setSelected(true);
      chkIsParent.setEnabled(false);

      boolean setResult = Utils.Common.showConfirmationBox(rootPane, "Do you want to set this account to be a parent?");

      if (setResult == false) {
        chkIsParent.setSelected(false);
      } else {
        //set it
        // check we got something
        // find user for BCN
        try {
          Integer result = JBillingAPI.getApi().getUserId(txtBCN.getText());

          UserWS user = JBillingAPI.getApi().getUserWS(result);
          user.setIsParent(true);

          // Don't change the password - we do this by not returning it
          user.setPassword(null);

          JBillingAPI.getApi().updateUser(user);
          userParentSelectedState = true;
        } catch (Exception ex) {
          Utils.Common.showErrorBox(rootPane, "Error: " + ex.getMessage());
        }
      }
    }
  }//GEN-LAST:event_chkIsParentActionPerformed

  private void btnAddBundleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBundleActionPerformed
    // add to the list
    String bundle = (String) cbxBundles.getSelectedItem();

    if (bundle.isEmpty() == false) {
      // Check if we already have it in the list
      for (int idx = 0; idx < cbxOptionalBundlesSelected.getItemCount(); idx++) {
        if (cbxOptionalBundlesSelected.getItemAt(idx).equals(bundle)) {
          // we already have it, just get out
          return;
        }
      }
      cbxOptionalBundlesSelected.addItem(bundle);
    }
  }//GEN-LAST:event_btnAddBundleActionPerformed

  private void cbxBundlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBundlesActionPerformed
    // set the add button if we can
    String selected = (String) cbxBundles.getSelectedItem();

    if (selected != null) {
      btnAddBundle.setEnabled(selected.equals("") == false);
    }
  }//GEN-LAST:event_cbxBundlesActionPerformed

  private void btnRemoveBundleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBundleActionPerformed
    // remove selected item
    ArrayList<String> items = new ArrayList<String>();

    for (int idx = 0; idx < cbxOptionalBundlesSelected.getItemCount(); idx++) {
      if (cbxOptionalBundlesSelected.getSelectedIndex() != idx) {
        items.add((String) cbxOptionalBundlesSelected.getItemAt(idx));
      }
    }

    // Clear out
    cbxOptionalBundlesSelected.removeAllItems();

    // Sort
    Collections.sort(items);
    Iterator<String> itemIter = items.iterator();

    while (itemIter.hasNext()) {
      cbxOptionalBundlesSelected.addItem(itemIter.next());
    }

  }//GEN-LAST:event_btnRemoveBundleActionPerformed

  private void cbxOptionalBundlesSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxOptionalBundlesSelectedActionPerformed
    // enable the delete button of we can delete something
    String selected = (String) cbxOptionalBundlesSelected.getSelectedItem();

    if (selected == null) {
      btnRemoveBundle.setEnabled(false);
    } else {
      btnRemoveBundle.setEnabled(selected.equals("") == false);
    }
  }//GEN-LAST:event_cbxOptionalBundlesSelectedActionPerformed

  private void txtANumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtANumberActionPerformed
    // Set the create button
    setCreateValidation();
  }//GEN-LAST:event_txtANumberActionPerformed

  private void cbxRatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRatesActionPerformed
    // Set the create button
    setCreateValidation();
  }//GEN-LAST:event_cbxRatesActionPerformed

private void loadPartnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPartnersActionPerformed
//  System.out.println("Executing itemTypes retrieve");       
//
//  if(getAPIPort()){
//    try{
//    List<Integer> resultArray = Utils.JBillingAPI.getPartnerList();
//
//    partnerId.removeAllItems();
//    serviceTypeStrings.removeAllItems();  
//    serviceTypeStrings.addItem(ServTypes.MobileServices);
//    serviceTypeStrings.addItem(ServTypes.DataServices);
//    serviceTypeStrings.addItem(ServTypes.FIXServices);
//
//    enumServMap.put(ServTypes.MobileServices, 1);
//    enumServMap.put(ServTypes.DataServices, 2);
//    enumServMap.put(ServTypes.FIXServices, 3);
//
//    serviceTypeR.put(1,ServTypes.MobileServices);
//    serviceTypeR.put(2,ServTypes.DataServices);
//    serviceTypeR.put(3,ServTypes.FIXServices);
//
//    /*serviceTypeR.put(1,"MobileServices");
//    serviceTypeR.put(2,"DataServices");
//    serviceTypeR.put(3,"FIXServices");*/
//
//    for(Integer partner : resultArray){
//       partnerId.addItem(partner);
//    }
//    }    
//    catch(Exception e){
//       System.out.println(e);
//    }
//  }
}//GEN-LAST:event_loadPartnersActionPerformed

  private void partnerServiceCreateActionPerformed(java.awt.event.ActionEvent evt) {
//  if(getAPIPort()){
//    System.out.println("called to create new partner_service");
//    
//    Integer SelectedPartnerId = (Integer) partnerId.getSelectedItem();
//    //String selectedService = (ServTypes) serviceTypeStrings.getSelectedItem();
//    Double PRate = new Double(pRateTxt.getText());
//    Double Fee = new Double(refFee.getText());
//    
//    Double PRateT = Double.parseDouble(pRateTxt.getText());
//    Double FeeT = Double.parseDouble(refFee.getText());
//    
//    Integer selServ = enumServMap.get((ServTypes) serviceTypeStrings.getSelectedItem());
//    System.out.println("called to create new partner_service with values " +SelectedPartnerId+";"+selServ+";"+PRate);
//    PartnerServiceWS partnerws = new PartnerServiceWS();
//    partnerws.setServiceType(selServ);
//    partnerws.setPartner(SelectedPartnerId);
//    partnerws.setPercentageRate(PRate);
//    partnerws.setReferralFee(Fee);
//    System.out.println("about to call createPartnerService");
//    Integer newPartId = port.createPartnerService(partnerws);
//  }  
  }

  private void processPayoutActionPerformed(java.awt.event.ActionEvent evt) {
    System.out.println("processPayoutActionPerformed executed");
    try {
      JBillingAPI.getApi().processPayout();
    } catch (JbillingAPIException ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  private void loadPartServActionPerformed(java.awt.event.ActionEvent evt) {
//  System.out.println("Executing PartnerService objects");
//      
//  partnerServiceIds.removeAllItems();
//
//  if(getAPIPort()){
//     try{
//     List<Integer> resultArray = Utils.JBillingAPI.getPartnerList();
//     List<PartnerServiceWS> partnerService = port.getPartnerServiceList();
//
//
//     for(PartnerServiceWS partServ:partnerService){
//       //Integer partnerServiceId = partServ.getId();
//       partnerServiceIds.addItem(partServ.getId());
//       partnerServices.put(partServ.getId(), partServ);
//       System.out.println("Added partnerService object "+ partServ.getId());
//     }       
//
//     }
//     catch(Exception e){
//         System.out.println(e);
//     }
//  }   
  }

  private void partnerServEditActionPerformed(java.awt.event.ActionEvent evt) {
//  System.out.println("populating PartnerService details");
//
//  Integer psId = new Integer(partnerServiceIds.getSelectedItem().toString());
//  PartnerServiceWS ps = (PartnerServiceWS)partnerServices.get(psId);
//  partnerId.removeAllItems();
//  partnerId.addItem(ps.getPartner()); 
//  pRateTxt.setText(ps.getPercentageRate().toString());
//  refFee.setText(ps.getReferralFee().toString());
//  serviceTypeStrings.removeAllItems();
//  System.out.println("Got sericetype is " +ps.getServiceType()+ "and values is "+serviceTypeR.get(ps.getServiceType()));
//  serviceTypeStrings.addItem(serviceTypeR.get(ps.getServiceType()));
//       
//       
//  //serviceTypeStrings.addItem(ps.getServiceType().);  
  }

  private void partnerServUpdateActionPerformed(java.awt.event.ActionEvent evt) {
//  if(getAPIPort()){
//    System.out.println("called to update partner_service");
//    Integer selectedPartnerId = (Integer) partnerId.getSelectedItem();
//    String selectedService =  serviceTypeStrings.getSelectedItem().toString();
//    Double PRate = new Double(pRateTxt.getText());
//    Double Fee = new Double(refFee.getText());
//    Integer partServ = new Integer(partnerServiceIds.getSelectedItem().toString());
//    System.out.println("selectedService");
//    //Integer selServ = serviceType.get(selectedService);
//    Integer selServ = enumServMap.get((ServTypes) serviceTypeStrings.getSelectedItem());

    //    System.out.println("called to create new partner_service with values " +selectedPartnerId+";"+selServ+";"+PRate);
//    PartnerServiceWS partnerws = new PartnerServiceWS();
//    partnerws.setServiceType(selServ);
//    System.out.println("selcted id"+partnerws.getServiceType());
//    partnerws.setPartner(selectedPartnerId);
//    partnerws.setPercentageRate(PRate);
//    partnerws.setReferralFee(Fee);
//    partnerws.setPartService(partServ);
//    port.updatePartnerService(partnerws);
//  }  
  }

private void refFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refFeeActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_refFeeActionPerformed

  private void txtANumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtANumberKeyReleased
    setCreateValidation();
  }//GEN-LAST:event_txtANumberKeyReleased

  private void rbLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLiveActionPerformed
    try {
      Common.copyFileByName("conf/jbilling-remote-beans-live.xml", "conf/jbilling-remote-beans.xml");
      rbLive.setSelected(true);
      rbLab.setSelected(false);
      rbLocalhost.setSelected(false);
    } catch (IOException ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
      Utils.Common.showErrorBox(rootPane, "Could not change configuration: " + ex.getMessage());
    }
  }//GEN-LAST:event_rbLiveActionPerformed

  private void rbLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLabActionPerformed
    try {
      Common.copyFileByName("conf/jbilling-remote-beans-lab.xml", "conf/jbilling-remote-beans.xml");
      rbLive.setSelected(false);
      rbLab.setSelected(true);
      rbLocalhost.setSelected(false);
    } catch (IOException ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
      Utils.Common.showErrorBox(rootPane, "Could not change configuration: " + ex.getMessage());
    }
  }//GEN-LAST:event_rbLabActionPerformed

  private void rbLocalhostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLocalhostActionPerformed
    try {
      Common.copyFileByName("conf/jbilling-remote-beans-localhost.xml", "conf/jbilling-remote-beans.xml");
      rbLive.setSelected(false);
      rbLab.setSelected(false);
      rbLocalhost.setSelected(true);
    } catch (IOException ex) {
      Logger.getLogger(JBGUIMainForm.class.getName()).log(Level.SEVERE, null, ex);
      Utils.Common.showErrorBox(rootPane, "Could not change configuration: " + ex.getMessage());
    }
  }//GEN-LAST:event_rbLocalhostActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager.getInstalledLookAndFeels();
      for (int idx = 0; idx < installedLookAndFeels.length; idx++) {
        if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
          javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(JBGUIMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(JBGUIMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(JBGUIMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(JBGUIMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new JBGUIMainForm().setVisible(true);
      }

    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAddBundle;
  private javax.swing.JButton btnCreateSubAcct;
  private javax.swing.JButton btnExit;
  private javax.swing.JButton btnFindByBCN;
  private javax.swing.JButton btnFindByUserId;
  private javax.swing.JButton btnLoad;
  private javax.swing.JButton btnRemoveBundle;
  private javax.swing.JButton btnTriggerBilling;
  private javax.swing.JButton btnTriggerLoading;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JComboBox cbxBundles;
  private javax.swing.JComboBox cbxOptionalBundlesSelected;
  private javax.swing.JComboBox cbxRates;
  private javax.swing.JCheckBox chkIsParent;
  private com.toedter.calendar.JDateChooser dchDateFrom;
  private com.toedter.calendar.JDateChooser dchDateTo;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JLabel lblANumber;
  private javax.swing.JLabel lblBCN;
  private javax.swing.JLabel lblCompanyName;
  private javax.swing.JLabel lblCreatedUser;
  private javax.swing.JLabel lblDateFrom;
  private javax.swing.JLabel lblDateTo;
  private javax.swing.JLabel lblMobileBundle;
  private javax.swing.JLabel lblMobileRate;
  private javax.swing.JLabel lblOptionalBundles;
  private javax.swing.JLabel lblUserID;
  private javax.swing.JButton loadPartServ;
  private javax.swing.JButton loadPartners;
  private javax.swing.JTextField pRateTxt;
  private javax.swing.JComboBox partnerId;
  private javax.swing.JButton partnerServEdit;
  private javax.swing.JButton partnerServUpdate;
  private javax.swing.JButton partnerServiceCreate;
  private javax.swing.JComboBox partnerServiceIds;
  private javax.swing.JPanel pnlScheduledTasks;
  private javax.swing.JButton processPayout;
  private javax.swing.JRadioButton rbLab;
  private javax.swing.JRadioButton rbLive;
  private javax.swing.JRadioButton rbLocalhost;
  private javax.swing.JTextField refFee;
  private javax.swing.JComboBox serviceTypeStrings;
  private javax.swing.JTextField txtANumber;
  private javax.swing.JTextField txtBCN;
  private javax.swing.JTextField txtNewID;
  private javax.swing.JTextField txtParentUserID;
  private javax.swing.JTextField txtUserNameOrg;
  // End of variables declaration//GEN-END:variables

  private void setCreateValidation() {
    boolean tmpEnabled = ((txtUserNameOrg.getText().isEmpty() == false)
            && (txtANumber.getText().length() == 10)
            && (cbxRates.getSelectedItem() != null)
            && (((String) cbxRates.getSelectedItem()).isEmpty() == false));

    btnCreateSubAcct.setEnabled(tmpEnabled);
  }

}
